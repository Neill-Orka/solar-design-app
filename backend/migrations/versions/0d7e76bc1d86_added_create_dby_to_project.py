"""added create dby to project

Revision ID: 0d7e76bc1d86
Revises: 600b32c8eb27
Create Date: 2025-09-22 10:50:38.707587

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0d7e76bc1d86'
down_revision = '600b32c8eb27'
branch_labels = None
depends_on = None


def upgrade():
    # ### REMOVE all the drop_table operations, KEEP ONLY THESE TWO LINES: ###
    op.add_column('projects', sa.Column('created_by_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'projects', 'users', ['created_by_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('created_by_id')

    op.create_table('job_cards',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('job_cards_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('complete_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('client_name_snapshot', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('client_email_snapshot', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('client_address_snapshot', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labourers_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('labour_hours', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('labour_rate_per_hour', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('materials_used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('did_travel', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('vehicle_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('travel_distance_km', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('coc_required', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('metadata_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['job_categories.id'], name='job_cards_category_id_fkey'),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='job_cards_client_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='job_cards_created_by_id_fkey'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='job_cards_owner_id_fkey'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], name='job_cards_vehicle_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='job_cards_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('job_card_time_entries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_card_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hours', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=False),
    sa.Column('hourly_rate_at_time', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['job_card_id'], ['job_cards.id'], name=op.f('job_card_time_entries_job_card_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('job_card_time_entries_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('job_card_time_entries_pkey'))
    )
    op.create_table('job_card_attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_card_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=80), autoincrement=False, nullable=True),
    sa.Column('size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uploaded_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['job_card_id'], ['job_cards.id'], name=op.f('job_card_attachments_job_card_id_fkey')),
    sa.ForeignKeyConstraint(['uploaded_by_id'], ['users.id'], name=op.f('job_card_attachments_uploaded_by_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('job_card_attachments_pkey'))
    )
    op.create_table('vehicles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('vehicles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('registration', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('rate_per_km', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='vehicles_pkey'),
    sa.UniqueConstraint('registration', name='vehicles_registration_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('job_card_materials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_card_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unit_cost_at_time', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('unit_price_at_time', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('note', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['job_card_id'], ['job_cards.id'], name=op.f('job_card_materials_job_card_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('job_card_materials_product_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('job_card_materials_pkey'))
    )
    op.create_table('job_categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('job_categories_pkey')),
    sa.UniqueConstraint('name', name=op.f('job_categories_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('technician_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hourly_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('technician_profiles_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('technician_profiles_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('technician_profiles_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
